<객체지향(Object Oriented Programming) : OOP>

객체 : 세상에 존재하는 모든 것을 뜻하며, 프로그래밍에서 속성과 기능을 가지는 프로그램 단위

[현실의 객체] : <사람>                    <TV>                      <승용차>
              * 속성 : 키, 몸무게         * 속성 : 채널, 사운드        * 속성 : 바퀴, 체인, 엔진
              * 기능 : 의사, 프로그래머    * 기능 : 미디어 송출         * 기능 : 이동수단

[프로그래밍에서 객체] : <날씨 프로그램>                        <계산기>
                     * 속성 : 온도, 미세먼지, 강수확률       * 속성 : + - * / ...
                     * 기능 : 날씨 예보                    * 기능 : 연산기능

Garbage Collector(GC) : 메모리를 정리하는 JAVA의 메모리관리도구

클래스 : 객체를 생성하기 위한 틀로 모든 객체는 클래스로부터 생성됨.(객체를 생성하기 위해 변수와 메소드를 정의하는 공간)
[자동차 클래스] - 속성 : 색상, 바퀴, 기능 : 배기량
자동차 클래스 복제 -> 자동차1 객체(색상: 검정, 바퀴 : 광폭, 기능 : 2500cc 배기량), 경유차 / 자동차2 객체(색상 : 은색, 바퀴 : 일반, 기능 : 배기량(3000cc), 전기차


클래스의 구성요소 : 속성(멤버변수), 기능(메서드)
예) 자전거 클래스 - 속성(멤버변수) : 안장, 핸들, 바구니, 기어, 페달, 바퀴
               - 기능(메서드) : 기어 변속, 가속, 브레이크, 달리기


객체지향을 사용하는 이유 : 모듈화, 재사용성 등등

<객체와 메모리>
1. 객체는 메모리에서 동적으로 생성되고, 객체가 더 이상필요없게되면 GC(Garbage Collector)에 의해서 제거된다.
ex) TestClass testclass = new TestClass(); -> 여기서 testclass는 TestClass의 래퍼런스(참조)이다. (동적생성)
2. 래퍼런스란 생성한 객체의 주소를 변수에 저장하는 것을 의미한다.
3. 생성자를 따로 선언하지 않아도 메모리상에서 자동으로 만들어준다.
4. 자료형이 같아도 다른 공간에 존재하는 객체는 다른객체이다(래퍼런스가 다르게때문)
ex) [객체1] [객체1] [객체1]
      ↑       ↑      ↑
    [주소]   [주소]  [주소]
※ 같은 객체를 여러번 선언해도 메모리상으로 다른공간에 저장하기때문에 같은 객체지만 같다고 볼 수 없다.
5. 래퍼런스에 null이 저장되면 연결이 끊기고 더 이상 사용할 수 없다.



